import asyncio
import logging
import schedule
import time
from datetime import datetime, timedelta
from aiogram import Bot
from sqlalchemy import select, and_
from config import config
from models.database import User
from services.user_service import UserService
from services.word_service import WordService
from utils.database import get_db_session
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

class DailyScheduler:
    def __init__(self):
        self.bot = Bot(token=config.BOT_TOKEN)
    
    async def send_morning_notifications(self):
        """–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ - —Å–ª–æ–≤–æ –¥–Ω—è"""
        logger.info("Starting morning notifications")
        
        async for db_session in get_db_session():
            try:
                user_service = UserService(db_session)
                word_service = WordService(db_session)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                users = await user_service.get_premium_users_for_notifications("09:00")
                
                for user in users:
                    try:
                        word = await word_service.get_word_of_day(user)
                        
                        if not word:
                            continue
                        
                        text = f"""
üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–ª–æ–≤–æ –¥–Ω—è:</b>

üî§ <b>{word.word}</b> [{word.transcription}]
üá∑üá∫ {word.translation}

üìù <i>{word.definition}</i>

üí¨ <b>–ü—Ä–∏–º–µ—Ä:</b>
<i>{word.example}</i>

üéØ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ —Å–µ–≥–æ–¥–Ω—è!
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user.streak_days}
                        """
                        
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="take_quiz")],
                            [InlineKeyboardButton(text="üìñ –ï—â–µ —Å–ª–æ–≤–∞", callback_data="word_of_day")]
                        ])
                        
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        logger.error(f"Error sending morning notification to {user.telegram_id}: {e}")
                
                logger.info(f"Sent morning notifications to {len(users)} users")
                
            except Exception as e:
                logger.error(f"Error in morning notifications: {e}")
    
    async def send_evening_notifications(self):
        """–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏—è—Ö"""
        logger.info("Starting evening notifications")
        
        async for db_session in get_db_session():
            try:
                user_service = UserService(db_session)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                users = await user_service.get_premium_users_for_notifications("19:00")
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω–∏–º–∞–ª—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è
                        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
                        
                        result = await db_session.execute(
                            select(UserProgress).where(
                                and_(
                                    UserProgress.user_id == user.id,
                                    UserProgress.date >= today
                                )
                            )
                        )
                        
                        today_progress = result.scalar_one_or_none()
                        
                        if not today_progress or (today_progress.words_studied == 0 and today_progress.quizzes_passed == 0):
                            # –ù–µ –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è
                            days_to_free_month = max(0, 30 - user.streak_days)
                            
                            text = f"""
üåÜ <b>–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>

‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è!
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user.streak_days}

‚è∞ –í—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –ø–æ–º–æ–≥—É—Ç:
- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–∏—é –¥–Ω–µ–π
- –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏
- –ü—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –º–µ—Å—è—Ü—É ({days_to_free_month} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)

üéØ –ü—Ä–æ–π–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–≤–∏–∑!
                            """
                            
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üéØ –ë—ã—Å—Ç—Ä—ã–π –∫–≤–∏–∑", callback_data="take_quiz")],
                                [InlineKeyboardButton(text="üìñ –°–ª–æ–≤–æ –¥–Ω—è", callback_data="word_of_day")]
                            ])
                            
                            await self.bot.send_message(
                                chat_id=user.telegram_id,
                                text=text,
                                reply_markup=keyboard,
                                parse_mode="HTML"
                            )
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        logger.error(f"Error sending evening notification to {user.telegram_id}: {e}")
                
                logger.info(f"Processed evening notifications for {len(users)} users")
                
            except Exception as e:
                logger.error(f"Error in evening notifications: {e}")
    
    async def check_subscription_expiry(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        logger.info("Checking subscription expiry")
        
        async for db_session in get_db_session():
            try:
                # –ü–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞
                tomorrow = datetime.utcnow() + timedelta(days=1)
                
                result = await db_session.execute(
                    select(User).where(
                        and_(
                            User.is_premium == True,
                            User.subscription_end <= tomorrow,
                            User.subscription_end > datetime.utcnow()
                        )
                    )
                )
                
                expiring_users = result.scalars().all()
                
                for user in expiring_users:
                    try:
                        days_left = (user.subscription_end - datetime.utcnow()).days
                        
                        text = f"""
‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç</b>

–í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.

üöÄ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å:
- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã
- –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
- –î–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã

üí∞ –í—Å–µ–≥–æ 99‚ÇΩ –≤ –º–µ—Å—è—Ü
                        """
                        
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")]
                        ])
                        
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                        
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        logger.error(f"Error sending expiry notification to {user.telegram_id}: {e}")
                
                logger.info(f"Sent expiry notifications to {len(expiring_users)} users")
                
            except Exception as e:
                logger.error(f"Error checking subscription expiry: {e}")
    
    async def update_expired_subscriptions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        logger.info("Updating expired subscriptions")
        
        async for db_session in get_db_session():
            try:
                current_time = datetime.utcnow()
                
                result = await db_session.execute(
                    select(User).where(
                        and_(
                            User.is_premium == True,
                            User.subscription_end <= current_time
                        )
                    )
                )
                
                expired_users = result.scalars().all()
                
                for user in expired_users:
                    user.is_premium = False
                
                if expired_users:
                    await db_session.commit()
                    logger.info(f"Updated {len(expired_users)} expired subscriptions")
                
            except Exception as e:
                await db_session.rollback()
                logger.error(f"Error updating expired subscriptions: {e}")
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        schedule.every().day.at("09:00").do(
            lambda: asyncio.create_task(self.send_morning_notifications())
        )
        
        # –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        schedule.every().day.at("19:00").do(
            lambda: asyncio.create_task(self.send_evening_notifications())
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00)
        schedule.every().day.at("12:00").do(
            lambda: asyncio.create_task(self.check_subscription_expiry())
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π —á–∞—Å)
        schedule.every().hour.do(
            lambda: asyncio.create_task(self.update_expired_subscriptions())
        )
        
        logger.info("Scheduler setup completed")
    
    async def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.setup_schedule()
        
        logger.info("Scheduler started")
        
        while True:
            try:
                schedule.run_pending()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"Error in scheduler loop: {e}")
                await asyncio.sleep(60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler = DailyScheduler()
    await scheduler.run_scheduler()

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Scheduler stopped by user")
    except Exception as e:
        logger.error(f"Scheduler error: {e}")