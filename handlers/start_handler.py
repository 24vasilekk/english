from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.user_service import UserService
from services.word_service import WordService
from utils.database import get_db_session
from utils.helpers import get_user_level_info
import logging

logger = logging.getLogger(__name__)
router = Router()

class UserState(StatesGroup):
    taking_level_test = State()
    selecting_topics = State()

# –¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
LEVEL_TEST_QUESTIONS = [
    {
        "question": "What ___ your name?",
        "options": ["am", "is", "are", "be"],
        "correct": 1,
        "level": "A1"
    },
    {
        "question": "I ___ to the cinema yesterday.",
        "options": ["go", "went", "have gone", "going"],
        "correct": 1,
        "level": "A2"
    },
    {
        "question": "If I ___ rich, I would travel the world.",
        "options": ["am", "was", "were", "be"],
        "correct": 2,
        "level": "B1"
    },
    {
        "question": "The project ___ by next Friday.",
        "options": ["will finish", "will be finished", "finishes", "finished"],
        "correct": 1,
        "level": "B2"
    },
    {
        "question": "Had she studied harder, she ___ the exam.",
        "options": ["would pass", "would have passed", "passed", "will pass"],
        "correct": 1,
        "level": "C1"
    },
    {
        "question": "The theory ___ by Einstein revolutionized physics.",
        "options": ["proposed", "proposing", "to propose", "having proposed"],
        "correct": 0,
        "level": "C2"
    }
]

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(message.from_user.id)
            
            if not user:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                user = await user_service.create_user(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                
                await show_welcome_message(message, state)
            else:
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                await show_main_menu(message, user)
                
        except Exception as e:
            logger.error(f"Error in start_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_welcome_message(message: Message, state: FSMContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    welcome_text = """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!</b>

üöÄ <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã  
- –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏

üí∞ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
–ü–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ–≥–æ 99‚ÇΩ/–º–µ—Å—è—Ü
üéÅ <b>–ë–û–ù–£–°:</b> –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Å—è—Ü –ë–ï–°–ü–õ–ê–¢–ù–û!

‚ö° <b>–ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å", callback_data="start_level_test")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ", callback_data="info")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

async def show_main_menu(message: Message, user):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    from datetime import datetime
    
    days_left = 0
    if user.subscription_end:
        days_left = max(0, (user.subscription_end - datetime.utcnow()).days)
    
    level_info = get_user_level_info(user.level)
    premium_status = f"üîì Premium –∞–∫—Ç–∏–≤–µ–Ω ({days_left} –¥–Ω–µ–π)" if user.is_premium and days_left > 0 else "üîí –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"
    
    menu_text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

üë§ <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {level_info['color']} {user.level} ({level_info['name']})
üî• <b>–°–µ—Ä–∏—è –¥–Ω–µ–π:</b> {user.streak_days}
‚≠ê <b>–û—á–∫–∏:</b> {user.total_points:,}
üìö <b>–°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ:</b> {user.words_learned}

{premium_status}
    """
    
    keyboard_rows = [
        [InlineKeyboardButton(text="üìñ –°–ª–æ–≤–æ –¥–Ω—è", callback_data="word_of_day")],
        [InlineKeyboardButton(text="üéØ –ö–≤–∏–∑", callback_data="take_quiz")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    
    if not user.is_premium or days_left <= 0:
        keyboard_rows.append([InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.answer(menu_text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            if user:
                await show_main_menu(callback.message, user)
            else:
                await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")
                
        except Exception as e:
            logger.error(f"Error in main_menu_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "info")
async def show_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    info_text = """
‚ÑπÔ∏è <b>–û English Learning Bot</b>

üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</b>
- –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å (A1-C2)
- –°–ª–æ–≤–∞ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ –≤–∞—Å
- –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞—Ä–∏ (—Ä–∞–±–æ—Ç–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –µ–¥–∞)

üß† <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞:</b>
- –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- –ê–ª–≥–æ—Ä–∏—Ç–º –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏
- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π

üéÆ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>
- –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
- –°–µ—Ä–∏–∏ –¥–Ω–µ–π —Å –±–æ–Ω—É—Å–∞–º–∏
- –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üíé <b>Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–≤–∏–∑—ã
- –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã

üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ü–∏—è:</b>
–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_level_test")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.answer(info_text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "start_level_test")
async def start_level_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    await state.set_state(UserState.taking_level_test)
    await state.update_data(
        question_index=0,
        correct_answers=0,
        user_answers=[],
        start_time=callback.message.date
    )
    
    test_intro = """
üìù <b>–¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ</b>

–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ 6 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.

‚è±Ô∏è –í—Ä–µ–º—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="begin_test")]
    ])
    
    await callback.message.answer(test_intro, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "begin_test")
async def begin_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
    await send_test_question(callback.message, state)

async def send_test_question(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()
    question_index = data.get("question_index", 0)
    
    if question_index >= len(LEVEL_TEST_QUESTIONS):
        await finish_level_test(message, state)
        return
    
    question = LEVEL_TEST_QUESTIONS[question_index]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{i+1}. {option}", callback_data=f"test_answer_{i}")]
        for i, option in enumerate(question["options"])
    ])
    
    text = f"""
üìù <b>–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(LEVEL_TEST_QUESTIONS)}</b>

{question["question"]}

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
    """
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("test_answer_"))
async def process_test_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ"""
    answer_index = int(callback.data.split("_")[-1])
    data = await state.get_data()
    
    question_index = data.get("question_index", 0)
    question = LEVEL_TEST_QUESTIONS[question_index]
    
    correct_answers = data.get("correct_answers", 0)
    user_answers = data.get("user_answers", [])
    
    is_correct = answer_index == question["correct"]
    if is_correct:
        correct_answers += 1
        await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=False)
    else:
        await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", show_alert=False)
    
    user_answers.append({
        "question_index": question_index,
        "answer": answer_index,
        "correct": is_correct,
        "level": question["level"]
    })
    
    await state.update_data(
        question_index=question_index + 1,
        correct_answers=correct_answers,
        user_answers=user_answers
    )
    
    await send_test_question(callback.message, state)

async def finish_level_test(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    data = await state.get_data()
    correct_answers = data.get("correct_answers", 0)
    user_answers = data.get("user_answers", [])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if correct_answers >= 5:
        level = "C1"
    elif correct_answers >= 4:
        level = "B2"
    elif correct_answers >= 3:
        level = "B1"
    elif correct_answers >= 2:
        level = "A2"
    else:
        level = "A1"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(message.from_user.id)
            
            if user:
                user.level = level
                await db_session.commit()
                
                level_info = get_user_level_info(level)
                
                result_text = f"""
üéâ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {correct_answers}/{len(LEVEL_TEST_QUESTIONS)}
üéØ <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {level_info['color']} {level} ({level_info['name']})

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è:</b>
{level_info['description']}

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
                """
                
                await message.answer(result_text, parse_mode="HTML")
                await show_topic_selection(message, state)
            
        except Exception as e:
            logger.error(f"Error finishing level test: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

async def show_topic_selection(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–µ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    topics = [
        ("üíº", "work", "–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞"),
        ("‚úàÔ∏è", "travel", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
        ("üçï", "food", "–ï–¥–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"),
        ("üíª", "technology", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
        ("üè•", "health", "–ó–¥–æ—Ä–æ–≤—å–µ"),
        ("üéµ", "entertainment", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),
        ("üéì", "education", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"),
        ("üè†", "home", "–î–æ–º –∏ —Å–µ–º—å—è")
    ]
    
    keyboard_rows = []
    for emoji, topic, name in topics:
        keyboard_rows.append([InlineKeyboardButton(
            text=f"{emoji} {name}", 
            callback_data=f"topic_{topic}"
        )])
    
    keyboard_rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="topics_done")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    text = """
üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã</b> (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è!
–í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—ã –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
    """
    
    await state.set_state(UserState.selecting_topics)
    await state.update_data(selected_topics=[])
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("topic_"))
async def toggle_topic(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
    topic = callback.data.split("_")[1]
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])
    
    if topic in selected_topics:
        selected_topics.remove(topic)
        await callback.answer(f"‚ùå –¢–µ–º–∞ —É–±—Ä–∞–Ω–∞", show_alert=False)
    else:
        selected_topics.append(topic)
        await callback.answer(f"‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", show_alert=False)
    
    await state.update_data(selected_topics=selected_topics)

@router.callback_query(F.data == "topics_done")
async def finish_topic_selection(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])
    
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            if user:
                user.topics = selected_topics
                await db_session.commit()
                
                await state.clear()
                
                success_text = f"""
üéâ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚úÖ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user.level}
‚úÖ –í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {len(selected_topics)}

üöÄ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</b>
- –ò–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞ –¥–Ω—è
- –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–≤–∏–∑—ã
- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
- –ü–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

üí° <b>–°–æ–≤–µ—Ç:</b> –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ö–æ—Ç—è –±—ã 5 –º–∏–Ω—É—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞!
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìñ –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="word_of_day")],
                    [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="take_quiz")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await callback.message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error finishing topic selection: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")