from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.user_service import UserService
from services.word_service import WordService
from utils.database import get_db_session
from utils.helpers import get_user_level_info, get_next_level, format_progress_bar, format_time_spent
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "progress")
async def show_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            word_service = WordService(db_session)
            
            user = await user_service.get_user(callback.from_user.id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            stats = await user_service.get_user_statistics(user, days=7)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ
            level_info = get_user_level_info(user.level)
            next_level = get_next_level(user.level)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            level_points = {
                "A1": 0, "A2": 500, "B1": 1000, 
                "B2": 2000, "C1": 3000, "C2": 5000
            }
            
            current_threshold = level_points.get(user.level, 0)
            next_threshold = level_points.get(next_level, 5000) if next_level else 5000
            
            progress_to_next = 0
            if next_level:
                progress_to_next = min(100, 
                    ((user.total_points - current_threshold) / (next_threshold - current_threshold)) * 100
                )
            
            # –°—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
            days_to_free_month = max(0, 30 - user.streak_days) if not user.free_month_used else 0
            free_month_status = "‚úÖ –ü–æ–ª—É—á–µ–Ω!" if user.free_month_used else f"{days_to_free_month} –¥–Ω–µ–π"
            
            # –°–ª–æ–≤–∞ –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            words_due = await word_service.get_words_due_for_review_count(user.id)
            
            text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>
üéØ –£—Ä–æ–≤–µ–Ω—å: {level_info['color']} {user.level} ({level_info['name']})
‚≠ê –û—á–∫–∏: {user.total_points:,}
üìö –°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: {user.words_learned}
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user.streak_days}

üìà <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>
üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {stats.get('total_days_active', 0)}/7
üìñ –°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: {stats.get('total_words_studied', 0)}
üéØ –ö–≤–∏–∑–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {stats.get('total_quizzes_passed', 0)}
‚≠ê –û—á–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {stats.get('total_points_earned', 0)}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {stats.get('average_accuracy', 0)}%
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {format_time_spent(stats.get('total_time_spent', 0))}

üÜô <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {next_level or '–º–∞–∫—Å–∏–º—É–º–∞'}:</b>
{format_progress_bar(int(progress_to_next), 100)} {progress_to_next:.1f}%

üîÑ <b>–°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</b> {words_due}
üéÅ <b>–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞:</b> {free_month_status}
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                [InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
                [InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="activity_chart")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in show_progress: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "detailed_stats")
async def show_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            stats_7d = await user_service.get_user_statistics(user, days=7)
            stats_30d = await user_service.get_user_statistics(user, days=30)
            
            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –¥–µ–Ω—å
            avg_words_day = stats_7d.get('total_words_studied', 0) / max(1, stats_7d.get('total_days_active', 1))
            avg_quizzes_day = stats_7d.get('total_quizzes_passed', 0) / max(1, stats_7d.get('total_days_active', 1))
            avg_time_day = stats_7d.get('total_time_spent', 0) / max(1, stats_7d.get('total_days_active', 1))
            
            # –¢—Ä–µ–Ω–¥ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º
            trend_accuracy = "üìà" if stats_7d.get('average_accuracy', 0) >= stats_30d.get('average_accuracy', 0) else "üìâ"
            
            text = f"""
üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>
üìñ –°–ª–æ–≤ –≤ –¥–µ–Ω—å: {avg_words_day:.1f}
üéØ –ö–≤–∏–∑–æ–≤ –≤ –¥–µ–Ω—å: {avg_quizzes_day:.1f}
‚è±Ô∏è –í—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å: {format_time_spent(int(avg_time_day))}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {stats_7d.get('average_accuracy', 0)}% {trend_accuracy}

üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>
üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {stats_30d.get('total_days_active', 0)}/30
üìñ –í—Å–µ–≥–æ —Å–ª–æ–≤: {stats_30d.get('total_words_studied', 0)}
üéØ –í—Å–µ–≥–æ –∫–≤–∏–∑–æ–≤: {stats_30d.get('total_quizzes_passed', 0)}
‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {stats_30d.get('total_points_earned', 0)}
üéØ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats_30d.get('average_accuracy', 0)}%

üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º:</b>
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            daily_records = stats_7d.get('daily_records', [])
            for i, record in enumerate(daily_records[-7:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                date = datetime.strptime(record['date'], "%Y-%m-%d")
                day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
                words = record['words_studied']
                quizzes = record['quizzes_passed'] 
                accuracy = record['accuracy']
                
                activity_icon = "‚úÖ" if words > 0 or quizzes > 0 else "‚≠ï"
                text += f"\n{activity_icon} {day_name} {date.strftime('%d.%m')}: {words}—Å–ª–æ–≤, {quizzes}–∫–≤–∏–∑–æ–≤, {accuracy}%"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="progress")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in show_detailed_stats: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "achievements")
async def show_achievements(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º)
            new_achievements = await user_service.check_achievements(user)
            
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            all_achievements = [
                {"icon": "üéØ", "name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "desc": "–ò–∑—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ", "condition": user.words_learned >= 1},
                {"icon": "üî•", "name": "–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥", "desc": "7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "condition": user.streak_days >= 7},
                {"icon": "üèÜ", "name": "–ú–µ—Å—è—Ü –ø–æ–¥—Ä—è–¥", "desc": "30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "condition": user.streak_days >= 30},
                {"icon": "üìö", "name": "–ó–Ω–∞—Ç–æ–∫ —Å–ª–æ–≤", "desc": "100 –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤", "condition": user.words_learned >= 100},
                {"icon": "üéì", "name": "–ú–∞—Å—Ç–µ—Ä —Å–ª–æ–≤", "desc": "500 –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤", "condition": user.words_learned >= 500},
                {"icon": "‚≠ê", "name": "–ü–µ—Ä–≤–∞—è —Ç—ã—Å—è—á–∞", "desc": "1000 –æ—á–∫–æ–≤", "condition": user.total_points >= 1000},
                {"icon": "üíé", "name": "–î–µ—Å—è—Ç—å —Ç—ã—Å—è—á", "desc": "10000 –æ—á–∫–æ–≤", "condition": user.total_points >= 10000},
                {"icon": "üéÅ", "name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü", "desc": "–ü–æ–ª—É—á–µ–Ω –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "condition": user.free_month_used}
            ]
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏ –±—É–¥—É—â–∏–µ
            earned = [a for a in all_achievements if a["condition"]]
            upcoming = [a for a in all_achievements if not a["condition"]]
            
            text = "üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
            
            if earned:
                text += "‚úÖ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b>\n"
                for achievement in earned:
                    text += f"{achievement['icon']} {achievement['name']} - {achievement['desc']}\n"
                text += "\n"
            
            if upcoming:
                text += "‚è≥ <b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ:</b>\n"
                for achievement in upcoming[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 5
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                    progress = ""
                    if "—Å–ª–æ–≤" in achievement["desc"]:
                        target = 100 if "100" in achievement["desc"] else 500
                        progress = f" ({user.words_learned}/{target})"
                    elif "–¥–Ω–µ–π" in achievement["desc"]:
                        target = 7 if "7" in achievement["desc"] else 30
                        progress = f" ({user.streak_days}/{target})"
                    elif "–æ—á–∫–æ–≤" in achievement["desc"]:
                        target = 1000 if "1000" in achievement["desc"] else 10000
                        progress = f" ({user.total_points:,}/{target:,})"
                    
                    text += f"{achievement['icon']} {achievement['name']}{progress}\n"
            
            if new_achievements:
                text += f"\nüéâ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:</b> {len(new_achievements)}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="progress")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in show_achievements: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "activity_chart")
async def show_activity_chart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            stats = await user_service.get_user_statistics(user, days=30)
            daily_records = stats.get('daily_records', [])
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            text = "üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (30 –¥–Ω–µ–π)</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
            weeks = []
            current_week = []
            
            for record in daily_records[-30:]:
                current_week.append(record)
                if len(current_week) == 7:
                    weeks.append(current_week)
                    current_week = []
            
            if current_week:  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é –Ω–µ–¥–µ–ª—é
                weeks.append(current_week)
            
            week_names = ["1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥", "2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥", "3 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥", "4 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥", "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è"]
            
            for i, week in enumerate(weeks[-5:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ–¥–µ–ª—å
                week_name = week_names[min(i, len(week_names)-1)]
                text += f"üìÖ <b>{week_name}:</b>\n"
                
                for day in week:
                    date = datetime.strptime(day['date'], "%Y-%m-%d")
                    day_short = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    activity_level = day['words_studied'] + day['quizzes_passed']
                    if activity_level >= 10:
                        activity_icon = "üü¢"  # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    elif activity_level >= 5:
                        activity_icon = "üü°"  # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    elif activity_level > 0:
                        activity_icon = "üü†"  # –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    else:
                        activity_icon = "‚ö™"  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    
                    text += f"{activity_icon} {day_short} "
                
                text += "\n\n"
            
            text += """
üü¢ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (10+ –¥–µ–π—Å—Ç–≤–∏–π)
üü° –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5-9 –¥–µ–π—Å—Ç–≤–∏–π)  
üü† –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-4 –¥–µ–π—Å—Ç–≤–∏—è)
‚ö™ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üí° <b>–°–æ–≤–µ—Ç:</b> –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–µ–ª–µ–Ω—ã–π –∏ –∂–µ–ª—Ç—ã–π —É—Ä–æ–≤–Ω–∏!
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="progress")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in show_activity_chart: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")