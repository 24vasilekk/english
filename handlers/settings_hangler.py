from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.user_service import UserService
from utils.database import get_db_session
from utils.helpers import validate_time_format, get_user_level_info
import logging

logger = logging.getLogger(__name__)
router = Router()

class SettingsState(StatesGroup):
    setting_morning_time = State()
    setting_evening_time = State()
    selecting_topics = State()
    changing_level = State()

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            notifications_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
            level_info = get_user_level_info(user.level)
            topics_text = ", ".join(user.topics) if user.topics else "–ù–µ –≤—ã–±—Ä–∞–Ω—ã"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_status = "üîì Premium" if user.is_premium else "üîí –ë–∞–∑–æ–≤–∞—è"
            
            text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notifications_status}
üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è:</b> {user.morning_time}
üåÜ <b>–í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è:</b> {user.evening_time}
üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_info['color']} {user.level} ({level_info['name']})
üìö <b>–¢–µ–º—ã:</b> {topics_text}
üéÆ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}

üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
                [InlineKeyboardButton(text="üåÖ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è", callback_data="set_morning_time")],
                [InlineKeyboardButton(text="üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è", callback_data="set_evening_time")],
                [InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")],
                [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—ã", callback_data="select_topics")],
                [InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="reset_progress")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in show_settings: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            user.notifications_enabled = not user.notifications_enabled
            await db_session.commit()
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            emoji = "üîî" if user.notifications_enabled else "üîï"
            
            await callback.answer(f"{emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await show_settings(callback)
            
        except Exception as e:
            logger.error(f"Error toggling notifications: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "set_morning_time")
async def set_morning_time(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(SettingsState.setting_morning_time)
    
    text = """
üåÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>

–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)

–í —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
- –°–ª–æ–≤–æ –¥–Ω—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–æ–º
- –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

‚è∞ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è:</b> 08:00 - 10:00
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="settings")]
    ])
    
    await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(SettingsState.setting_morning_time)
async def process_morning_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    time_str = message.text.strip()
    
    if not validate_time_format(time_str):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)"
        )
        return
    
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(message.from_user.id)
            
            user.morning_time = time_str
            await db_session.commit()
            
            await state.clear()
            
            await message.answer(
                f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è –≤ {time_str} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                ])
            )
            
        except Exception as e:
            logger.error(f"Error setting morning time: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")

@router.callback_query(F.data == "set_evening_time")
async def set_evening_time(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(SettingsState.setting_evening_time)
    
    text = """
üåÜ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>

–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:00)

–í —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö (–µ—Å–ª–∏ –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å)
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

‚è∞ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è:</b> 18:00 - 21:00
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="settings")]
    ])
    
    await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(SettingsState.setting_evening_time)
async def process_evening_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    time_str = message.text.strip()
    
    if not validate_time_format(time_str):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:00)"
        )
        return
    
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(message.from_user.id)
            
            user.evening_time = time_str
            await db_session.commit()
            
            await state.clear()
            
            await message.answer(
                f"‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {time_str} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
                ])
            )
            
        except Exception as e:
            logger.error(f"Error setting evening time: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")

@router.callback_query(F.data == "change_level")
async def change_level(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"""
    text = """
üéØ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ</b>

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:

üü¢ <b>A1</b> - –ù–∞—á–∏–Ω–∞—é—â–∏–π (–±–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã)
üîµ <b>A2</b> - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π (–ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã)
üü° <b>B1</b> - –°—Ä–µ–¥–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏)
üü† <b>B2</b> - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ä–µ–¥–Ω–∏–π (—Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã)
üî¥ <b>C1</b> - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ)
üü£ <b>C2</b> - –í–ª–∞–¥–µ–Ω–∏–µ –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ A1 - –ù–∞—á–∏–Ω–∞—é—â–∏–π", callback_data="level_A1")],
        [InlineKeyboardButton(text="üîµ A2 - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π", callback_data="level_A2")],
        [InlineKeyboardButton(text="üü° B1 - –°—Ä–µ–¥–Ω–∏–π", callback_data="level_B1")],
        [InlineKeyboardButton(text="üü† B2 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ä–µ–¥–Ω–∏–π", callback_data="level_B2")],
        [InlineKeyboardButton(text="üî¥ C1 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_C1")],
        [InlineKeyboardButton(text="üü£ C2 - –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ", callback_data="level_C2")],
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="start_level_test")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="settings")]
    ])
    
    await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("level_"))
async def set_level(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    new_level = callback.data.split("_")[1]
    
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            old_level = user.level
            user.level = new_level
            await db_session.commit()
            
            level_info = get_user_level_info(new_level)
            
            await callback.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_level}!", show_alert=True)
            
            text = f"""
üéØ <b>–£—Ä–æ–≤–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

üìä <b>–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å:</b> {old_level}
üÜï <b>–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:</b> {level_info['color']} {new_level} ({level_info['name']})

üìö <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è:</b>
- –°–ª–æ–≤–∞ –±—É–¥—É—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å—Å—è –ø–æ–¥ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
- –ö–≤–∏–∑—ã –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏

üí° <b>–°–æ–≤–µ—Ç:</b> –ï—Å–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º –∏–ª–∏ –ª–µ–≥–∫–∏–º, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ", callback_data="word_of_day")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error setting level: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "select_topics")
async def select_topics(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–µ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            await state.set_state(SettingsState.selecting_topics)
            await state.update_data(selected_topics=user.topics.copy() if user.topics else [])
            
            topics = [
                ("üíº", "work", "–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞"),
                ("‚úàÔ∏è", "travel", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
                ("üçï", "food", "–ï–¥–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"),
                ("üíª", "technology", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
                ("üè•", "health", "–ó–¥–æ—Ä–æ–≤—å–µ"),
                ("üéµ", "entertainment", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),
                ("üéì", "education", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"),
                ("üè†", "home", "–î–æ–º –∏ —Å–µ–º—å—è"),
                ("üåø", "nature", "–ü—Ä–∏—Ä–æ–¥–∞"),
                ("üí∞", "business", "–ë–∏–∑–Ω–µ—Å"),
                ("üé®", "art", "–ò—Å–∫—É—Å—Å—Ç–≤–æ"),
                ("‚öΩ", "sport", "–°–ø–æ—Ä—Ç")
            ]
            
            keyboard_rows = []
            for emoji, topic, name in topics:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ç–µ–º–∞
                status = " ‚úÖ" if topic in user.topics else ""
                keyboard_rows.append([InlineKeyboardButton(
                    text=f"{emoji} {name}{status}", 
                    callback_data=f"topic_toggle_{topic}"
                )])
            
            keyboard_rows.extend([
                [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="save_topics")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="settings")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            
            selected_count = len(user.topics) if user.topics else 0
            
            text = f"""
üìö <b>–í—ã–±–æ—Ä —Ç–µ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã.

üìä <b>–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º:</b> {selected_count}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> –≤—ã–±—Ä–∞—Ç—å 3-5 —Ç–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
            """
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in select_topics: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("topic_toggle_"))
async def toggle_topic(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
    topic = callback.data.split("_")[2]
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])
    
    if topic in selected_topics:
        selected_topics.remove(topic)
        await callback.answer("‚ùå –¢–µ–º–∞ —É–±—Ä–∞–Ω–∞", show_alert=False)
    else:
        selected_topics.append(topic)
        await callback.answer("‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", show_alert=False)
    
    await state.update_data(selected_topics=selected_topics)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏
    await select_topics(callback, state)

@router.callback_query(F.data == "save_topics")
async def save_topics(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])
    
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            user.topics = selected_topics
            await db_session.commit()
            
            await state.clear()
            
            topics_text = ", ".join(selected_topics) if selected_topics else "–í—Å–µ —Ç–µ–º—ã"
            
            await callback.answer("‚úÖ –¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", show_alert=True)
            
            text = f"""
üìö <b>–¢–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>

‚úÖ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:</b> {topics_text}

üìñ <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è:</b>
- –°–ª–æ–≤–∞ –¥–Ω—è –±—É–¥—É—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
- –ö–≤–∏–∑—ã –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏

üöÄ –¢–µ–ø–µ—Ä—å –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –µ—â–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º!
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ", callback_data="word_of_day")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error saving topics: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

@router.callback_query(F.data == "reset_progress")
async def reset_progress_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    text = """
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?

‚ùå <b>–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:</b>
- –í—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
- –ò—Å—Ç–æ—Ä–∏—è –∫–≤–∏–∑–æ–≤
- –°–µ—Ä–∏—è –¥–Ω–µ–π
- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚úÖ <b>–û—Å—Ç–∞–Ω–µ—Ç—Å—è:</b>
- –ü–æ–¥–ø–∏—Å–∫–∞
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã

‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï", callback_data="confirm_reset")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="settings")]
    ])
    
    await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "confirm_reset")
async def confirm_reset_progress(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            user.total_points = 0
            user.streak_days = 0
            user.words_learned = 0
            user.last_word_study = None
            user.last_quiz = None
            
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            from sqlalchemy import delete
            from models.database import UserWord, UserProgress, UserQuizResult, UserAchievement
            
            await db_session.execute(delete(UserWord).where(UserWord.user_id == user.id))
            await db_session.execute(delete(UserProgress).where(UserProgress.user_id == user.id))
            await db_session.execute(delete(UserQuizResult).where(UserQuizResult.user_id == user.id))
            await db_session.execute(delete(UserAchievement).where(UserAchievement.user_id == user.id))
            
            await db_session.commit()
            
            await callback.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!", show_alert=True)
            
            text = """
üîÑ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</b>

‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
üìö –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã

üöÄ <b>–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É —Å—Ç–∞—Ä—Ç—É?</b>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å", callback_data="start_level_test")],
                [InlineKeyboardButton(text="üìñ –ò–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞", callback_data="word_of_day")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            await db_session.rollback()
            logger.error(f"Error resetting progress: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ")