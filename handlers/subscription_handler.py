from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.types import LabeledPrice, PreCheckoutQuery
from services.user_service import UserService
from utils.database import get_db_session
from config import config
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "subscription")
async def show_subscription_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            days_left = 0
            if user.subscription_end:
                days_left = max(0, (user.subscription_end - datetime.utcnow()).days)
            
            if user.is_premium and days_left > 0:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                text = f"""
üíé <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

‚úÖ Premium –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {user.subscription_end.strftime("%d.%m.%Y")}
üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}

üåü <b>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã –∏ —Ç–µ—Å—Ç—ã
- –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üéÅ <b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ:</b> –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏", callback_data="promotion_info")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            else:
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                days_to_free_month = max(0, 30 - user.streak_days) if not user.free_month_used else "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                
                text = f"""
üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ English Learning Bot</b>

üåü <b>Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã –∏ —Ç–µ—Å—Ç—ã
- –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üí∞ <b>–¶–µ–Ω–∞:</b> {config.SUBSCRIPTION_PRICE}‚ÇΩ –≤ –º–µ—Å—è—Ü

üéÅ <b>–°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:</b>
–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –ë–ï–°–ü–õ–ê–¢–ù–û!

üî• <b>–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞:</b> {days_to_free_month} –¥–Ω–µ–π

‚ö° <b>–ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {config.SUBSCRIPTION_PRICE}‚ÇΩ", callback_data="pay_subscription")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏", callback_data="promotion_info")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in show_subscription_info: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "promotion_info")
async def show_promotion_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —É—Å–ª–æ–≤–∏–π –∞–∫—Ü–∏–∏"""
    text = """
üéÅ <b>–£–°–õ–û–í–ò–Ø –ê–ö–¶–ò–ò "30 –î–ù–ï–ô - –ú–ï–°–Ø–¶ –í –ü–û–î–ê–†–û–ö"</b>

‚úÖ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:</b>
1. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 99‚ÇΩ
2. –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ +30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

üìã <b>–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:</b>
- –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–≤–∏–∑–∞
- –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –¥–Ω—è
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
- –ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω—É–ª—è–µ—Ç—Å—è
- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ

üî• <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</b> –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–Ω—è—Ç–∏—è—Ö!

üí° <b>–°–µ–∫—Ä–µ—Ç:</b> –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏ –¥–∞–ª—å—à–µ!
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="subscription")]
    ])
    
    await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "pay_subscription")
async def process_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    if not config.PAYMENT_TOKEN:
        await callback.message.answer(
            "‚ùå <b>–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium.",
            parse_mode="HTML"
        )
        return
    
    try:
        prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=config.SUBSCRIPTION_PRICE * 100)]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        
        await callback.message.answer_invoice(
            title="English Learning Bot - Premium –ø–æ–¥–ø–∏—Å–∫–∞",
            description=f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü –∑–∞ {config.SUBSCRIPTION_PRICE}‚ÇΩ. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã, –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!",
            payload="subscription_monthly",
            provider_token=config.PAYMENT_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="subscription",
            photo_url="https://via.placeholder.com/400x300/4CAF50/FFFFFF?text=Premium",
            photo_size=400,
            photo_width=400,
            photo_height=300
        )
        
    except Exception as e:
        logger.error(f"Error creating invoice: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        await pre_checkout_query.answer(ok=True)
    except Exception as e:
        logger.error(f"Error in pre_checkout_query: {e}")
        await pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

@router.message(F.successful_payment)
async def successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(message.from_user.id)
            
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await user_service.update_subscription(user, months=1)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            user.total_paid += config.SUBSCRIPTION_PRICE
            await db_session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await db_session.refresh(user)
            
            days_left = (user.subscription_end - datetime.utcnow()).days
            days_to_free_month = max(0, 30 - user.streak_days) if not user.free_month_used else 0
            
            success_text = f"""
üéâ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!</b>

‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ: {user.subscription_end.strftime("%d.%m.%Y")}
üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –Ω–∞: {days_left} –¥–Ω–µ–π

üéÅ <b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ:</b> –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å {days_to_free_month} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

üöÄ <b>–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- üéØ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–≤–∏–∑—ã
- üîä –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ 
- üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- üé® –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã
- üîî –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", callback_data="take_quiz")],
                [InlineKeyboardButton(text="üìñ –°–ª–æ–≤–æ –¥–Ω—è", callback_data="word_of_day")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —Å —Å–æ–≤–µ—Ç–∞–º–∏
            await asyncio.sleep(2)
            tips_text = """
üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:</b>

üåÖ <b>–£—Ç—Ä–æ–º:</b> –ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ - –º–æ–∑–≥ –ª—É—á—à–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç
üåÜ <b>–í–µ—á–µ—Ä–æ–º:</b> –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –∏–∑—É—á–µ–Ω–Ω–æ–µ - –∑–∞–∫—Ä–µ–ø–ª—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª
üéØ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</b> –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–≤–∏–∑ –¥–ª—è —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –ù–µ –æ—Ç–∫–ª—é—á–∞–π—Ç–µ - –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å

–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! üöÄ
            """
            
            await message.answer(tips_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in successful_payment: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")