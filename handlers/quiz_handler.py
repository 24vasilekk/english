from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.user_service import UserService
from services.word_service import WordService
from services.quiz_service import QuizService
from utils.database import get_db_session
from utils.helpers import is_premium_feature_available
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = Router()

class QuizState(StatesGroup):
    taking_quiz = State()
    word_quiz = State()

@router.callback_query(F.data == "take_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–±—ã—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞"""
    async for db_session in get_db_session():
        try:
            user_service = UserService(db_session)
            user = await user_service.get_user(callback.from_user.id)
            
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º
            if not is_premium_feature_available(user):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")]
                ])
                
                await callback.message.answer(
                    "üîí <b>–ö–≤–∏–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ!</b>\n\n"
                    "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 99‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
                    "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã\n"
                    "‚Ä¢ –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n"
                    "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return
            
            # –¢–∏–ø—ã –∫–≤–∏–∑–æ–≤
            quiz_types = [
                ("üìö –°–ª–æ–≤–∞—Ä–Ω—ã–π –∫–≤–∏–∑", "vocabulary"),
                ("üìñ –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥", "reverse_vocabulary"),
                ("üìù –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", "grammar"),
                ("üé≤ –°–º–µ—à–∞–Ω–Ω—ã–π", "mixed")
            ]
            
            keyboard_rows = []
            for name, quiz_type in quiz_types:
                keyboard_rows.append([InlineKeyboardButton(
                    text=name, 
                    callback_data=f"quiz_type_{quiz_type}"
                )])
            
            keyboard_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            
            text = """
üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∏–∑–∞:</b>

üìö <b>–°–ª–æ–≤–∞—Ä–Ω—ã–π</b> - –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
üìñ <b>–û–±—Ä–∞—Ç–Ω—ã–π</b> - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π  
üìù <b>–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞</b> - –≤—Ä–µ–º–µ–Ω–∞, –ø—Ä–µ–¥–ª–æ–≥–∏, –∞—Ä—Ç–∏–∫–ª–∏
üé≤ <b>–°–º–µ—à–∞–Ω–Ω—ã–π</b> - –≤—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤

üî• <b>–°–µ—Ä–∏—è –¥–Ω–µ–π:</b> {user.streak_days} (–±–æ–Ω—É—Å x{1.5 if user.streak_days >= 7 else 1})
            """.format(user=user)
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in start_quiz: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("quiz_type_"))
async def select_quiz_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–≤–∏–∑–∞"""
    quiz_type = callback.data.split("_")[2]
    
    await state.set_state(QuizState.taking_quiz)
    await state.update_data(
        quiz_type=quiz_type,
        quiz_score=0,
        quiz_questions=0,
        questions_data=[],
        start_time=datetime.utcnow()
    )
    
    await send_quiz_question(callback.message, state)

async def send_quiz_question(message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞"""
    async for db_session in get_db_session():
        try:
            data = await state.get_data()
            quiz_type = data.get("quiz_type")
            quiz_questions = data.get("quiz_questions", 0)
            
            if quiz_questions >= 10:
                await finish_quiz(message, state)
                return
            
            user_service = UserService(db_session)
            word_service = WordService(db_session)
            quiz_service = QuizService(db_session)
            
            user = await user_service.get_user(message.chat.id)
            
            question_data = None
            
            if quiz_type in ["vocabulary", "reverse_vocabulary"]:
                # –°–ª–æ–≤–∞—Ä–Ω—ã–µ –∫–≤–∏–∑—ã
                word = await word_service.get_word_of_day(user)
                if word:
                    if quiz_type == "vocabulary":
                        question_data = await quiz_service.create_vocabulary_quiz(user, word)
                    else:
                        question_data = await quiz_service.create_reverse_vocabulary_quiz(user, word)
            
            elif quiz_type == "grammar":
                # –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–∏–∑—ã
                questions = await quiz_service.get_quiz_questions(user, 1, "grammar")
                if questions:
                    question_data = questions[0]
            
            else:  # mixed
                # –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–∏–ø
                import random
                selected_type = random.choice(["vocabulary", "reverse_vocabulary", "grammar"])
                
                if selected_type == "grammar":
                    questions = await quiz_service.get_quiz_questions(user, 1, "grammar")
                    if questions:
                        question_data = questions[0]
                else:
                    word = await word_service.get_word_of_day(user)
                    if word:
                        if selected_type == "vocabulary":
                            question_data = await quiz_service.create_vocabulary_quiz(user, word)
                        else:
                            question_data = await quiz_service.create_reverse_vocabulary_quiz(user, word)
            
            if not question_data:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
            await state.update_data(current_question=question_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            question_text = f"üéØ <b>–í–æ–ø—Ä–æ—Å {quiz_questions + 1}/10</b>\n\n"
            
            if question_data.get("transcription"):
                question_text += f"{question_data['question']}\nüìù [{question_data['transcription']}]\n\n"
            else:
                question_text += f"{question_data['question']}\n\n"
            
            # –ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            keyboard_rows = []
            for i, option in enumerate(question_data["options"]):
                keyboard_rows.append([InlineKeyboardButton(
                    text=f"{i+1}. {option}", 
                    callback_data=f"quiz_answer_{i}"
                )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            
            await message.answer(question_text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error sending quiz question: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
            await state.clear()

@router.callback_query(F.data.startswith("quiz_answer_"))
async def process_quiz_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–≤–∏–∑–µ"""
    answer_index = int(callback.data.split("_")[-1])
    
    async for db_session in get_db_session():
        try:
            data = await state.get_data()
            current_question = data.get("current_question")
            
            if not current_question:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞")
                return
            
            correct_answer = current_question["correct_answer"]
            is_correct = answer_index == correct_answer
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–∏–∑–∞
            quiz_score = data.get("quiz_score", 0)
            quiz_questions = data.get("quiz_questions", 0) + 1
            questions_data = data.get("questions_data", [])
            
            if is_correct:
                quiz_score += 1
                await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=True)
            else:
                correct_option = current_question["options"][correct_answer]
                await callback.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}", show_alert=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–ø—Ä–æ—Å–∞
            question_result = {
                "question": current_question["question"],
                "selected_answer": answer_index,
                "correct_answer": correct_answer,
                "is_correct": is_correct,
                "explanation": current_question.get("explanation", "")
            }
            questions_data.append(question_result)
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∫–≤–∏–∑
            if current_question.get("word_id"):
                word_service = WordService(db_session)
                user_service = UserService(db_session)
                
                user = await user_service.get_user(callback.from_user.id)
                await word_service.mark_word_studied(
                    user.id, 
                    current_question["word_id"], 
                    is_correct
                )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞ –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å quiz_id
            if current_question.get("id"):
                quiz_service = QuizService(db_session)
                await quiz_service.record_quiz_result(
                    callback.from_user.id,
                    current_question["id"],
                    is_correct,
                    answer_index
                )
            
            await state.update_data(
                quiz_score=quiz_score,
                quiz_questions=quiz_questions,
                questions_data=questions_data
            )
            
            if quiz_questions >= 10:
                await finish_quiz(callback.message, state)
            else:
                await send_quiz_question(callback.message, state)
                
        except Exception as e:
            logger.error(f"Error processing quiz answer: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def finish_quiz(message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞"""
    async for db_session in get_db_session():
        try:
            data = await state.get_data()
            score = data.get("quiz_score", 0)
            start_time = data.get("start_time")
            quiz_type = data.get("quiz_type", "mixed")
            
            user_service = UserService(db_session)
            user = await user_service.get_user(message.chat.id)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            time_taken = 0
            if start_time:
                time_taken = int((datetime.utcnow() - start_time).total_seconds() / 60)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if score >= 9:
                result_emoji = "üèÜ"
                result_text = "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!"
                base_points = 100
            elif score >= 7:
                result_emoji = "ü•á"
                result_text = "–û—Ç–ª–∏—á–Ω–æ!"
                base_points = 80
            elif score >= 5:
                result_emoji = "ü•à"
                result_text = "–•–æ—Ä–æ—à–æ!"
                base_points = 60
            else:
                result_emoji = "üìö"
                result_text = "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
                base_points = 40
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Å –±–æ–Ω—É—Å–∞–º–∏
            points_earned = await user_service.add_points(user, base_points)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π
            streak_info = await user_service.update_streak(user)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await user_service.record_daily_progress(
                user,
                quizzes_passed=1,
                correct_answers=score,
                total_answers=10,
                points_earned=points_earned,
                time_spent=time_taken
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new_achievements = await user_service.check_achievements(user)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_message = f"""
{result_emoji} <b>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {score}/10 ({score * 10}%)
‚≠ê <b>–û—á–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ:</b> {points_earned}
‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {time_taken} –º–∏–Ω

üî• <b>–°–µ—Ä–∏—è –¥–Ω–µ–π:</b> {user.streak_days}
üìà <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> {user.total_points:,}

<i>{result_text}</i>
            """
            
            if streak_info.get("free_month_granted"):
                result_message += "\nüéÅ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü –∑–∞ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!</b>"
            
            if new_achievements:
                result_message += "\n\nüèÜ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
                for achievement in new_achievements:
                    result_message += f"‚Ä¢ {achievement['icon']} {achievement['name']}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ï—â–µ –∫–≤–∏–∑", callback_data="take_quiz")],
                [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="quiz_details")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            await state.update_data(final_results=data)
            await state.set_state(None)
            
            await message.answer(result_message, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error finishing quiz: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞")
            await state.clear()

@router.callback_query(F.data == "quiz_details")
async def show_quiz_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞"""
    data = await state.get_data()
    final_results = data.get("final_results", {})
    questions_data = final_results.get("questions_data", [])
    
    if not questions_data:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    details_text = "üìã <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
    
    for i, question_data in enumerate(questions_data):
        status = "‚úÖ" if question_data["is_correct"] else "‚ùå"
        details_text += f"{status} <b>–í–æ–ø—Ä–æ—Å {i+1}:</b>\n"
        details_text += f"<i>{question_data['question'][:50]}...</i>\n"
        
        if not question_data["is_correct"] and question_data.get("explanation"):
            details_text += f"üí° {question_data['explanation'][:100]}...\n"
        
        details_text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback.message.answer(details_text, reply_markup=keyboard, parse_mode="HTML")

async def start_word_quiz(callback: CallbackQuery, word_id: int):
    """–ù–∞—á–∞–ª–æ –∫–≤–∏–∑–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ª–æ–≤—É"""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ª–æ–≤—É
    pass  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏