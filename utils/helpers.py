import re
from datetime import datetime, timedelta
from typing import List, Optional
import random
import string

def validate_time_format(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
    pattern = r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
    return bool(re.match(pattern, time_str))

def calculate_next_review(stage: int, easiness_factor: float = 2.5) -> datetime:
    """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    intervals = {
        0: 1,      # 1 –¥–µ–Ω—å
        1: 3,      # 3 –¥–Ω—è  
        2: 7,      # 1 –Ω–µ–¥–µ–ª—è
        3: 21,     # 3 –Ω–µ–¥–µ–ª–∏
        4: 60,     # 2 –º–µ—Å—è—Ü–∞
        5: 180     # 6 –º–µ—Å—è—Ü–µ–≤
    }
    
    base_interval = intervals.get(stage, 180)
    actual_interval = int(base_interval * easiness_factor)
    
    return datetime.utcnow() + timedelta(days=actual_interval)

def update_easiness_factor(current_factor: float, is_correct: bool, difficulty: int = 3) -> float:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ª–µ–≥–∫–æ—Å—Ç–∏ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ SM-2"""
    if is_correct:
        new_factor = current_factor + (0.1 - (5 - difficulty) * (0.08 + (5 - difficulty) * 0.02))
    else:
        new_factor = current_factor - 0.2
    
    return max(1.3, new_factor)

def get_level_points_threshold(level: str) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –æ—á–∫–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è"""
    thresholds = {
        "A1": 0,
        "A2": 500,
        "B1": 1000,
        "B2": 2000,
        "C1": 3000,
        "C2": 5000
    }
    return thresholds.get(level, 0)

def get_next_level(current_level: str) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    levels = ["A1", "A2", "B1", "B2", "C1", "C2"]
    try:
        current_index = levels.index(current_level)
        return levels[current_index + 1] if current_index < len(levels) - 1 else None
    except ValueError:
        return "A2"

def format_progress_bar(current: int, maximum: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if maximum == 0:
        return "‚ñë" * length
    
    filled = int((current / maximum) * length)
    return "‚ñì" * filled + "‚ñë" * (length - filled)

def generate_quiz_options(correct_answer: str, wrong_options: List[str], count: int = 4) -> tuple:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞"""
    if len(wrong_options) < count - 1:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
        additional_needed = count - 1 - len(wrong_options)
        for _ in range(additional_needed):
            wrong_options.append(f"–í–∞—Ä–∏–∞–Ω—Ç {random.randint(1, 100)}")
    
    # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    selected_wrong = random.sample(wrong_options, min(count - 1, len(wrong_options)))
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    all_options = [correct_answer] + selected_wrong
    random.shuffle(all_options)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    correct_index = all_options.index(correct_answer)
    
    return all_options, correct_index

def calculate_streak_bonus(streak_days: int) -> float:
    """–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∑–∞ —Å–µ—Ä–∏—é –¥–Ω–µ–π"""
    if streak_days >= 30:
        return 3.0
    elif streak_days >= 14:
        return 2.0
    elif streak_days >= 7:
        return 1.5
    else:
        return 1.0

def format_time_spent(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è"""
    if minutes < 60:
        return f"{minutes} –º–∏–Ω"
    else:
        hours = minutes // 60
        remaining_minutes = minutes % 60
        if remaining_minutes == 0:
            return f"{hours} —á"
        else:
            return f"{hours} —á {remaining_minutes} –º–∏–Ω"

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text.strip())
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[<>\"\'&]', '', text)
    return text

def generate_random_string(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    letters = string.ascii_lowercase + string.digits
    return ''.join(random.choice(letters) for _ in range(length))

def is_premium_feature_available(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π"""
    from config import config
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if getattr(config, 'FREE_MODE', False):
        return True
        
    if user.telegram_id in getattr(config, 'ADMIN_IDS', []):
        return True
        
    if not user.subscription_end:
        return False
    return user.is_premium and user.subscription_end > datetime.utcnow()

def get_user_level_info(level: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    level_info = {
        "A1": {
            "name": "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
            "description": "–ü–æ–Ω–∏–º–∞–µ—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∑–Ω–∞–∫–æ–º—ã–µ —Ñ—Ä–∞–∑—ã",
            "words_count": 500,
            "color": "üü¢"
        },
        "A2": {
            "name": "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π", 
            "description": "–ú–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã",
            "words_count": 1000,
            "color": "üîµ"
        },
        "B1": {
            "name": "–°—Ä–µ–¥–Ω–∏–π",
            "description": "–ü–æ–Ω–∏–º–∞–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ —Ç–µ–∫—Å—Ç–æ–≤",
            "words_count": 2000,
            "color": "üü°"
        },
        "B2": {
            "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ä–µ–¥–Ω–∏–π",
            "description": "–ü–æ–Ω–∏–º–∞–µ—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã",
            "words_count": 3000,
            "color": "üü†"
        },
        "C1": {
            "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
            "description": "–°–≤–æ–±–æ–¥–Ω–æ –≤—ã—Ä–∞–∂–∞–µ—Ç–µ –º—ã—Å–ª–∏",
            "words_count": 5000,
            "color": "üî¥"
        },
        "C2": {
            "name": "–í–ª–∞–¥–µ–Ω–∏–µ –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ",
            "description": "–í–ª–∞–¥–µ–µ—Ç–µ —è–∑—ã–∫–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–æ—Å–∏—Ç–µ–ª—è",
            "words_count": 8000,
            "color": "üü£"
        }
    }
    return level_info.get(level, level_info["A1"])